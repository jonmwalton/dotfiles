{
  "version": 3,
  "sources": ["../src/addTaskSimple.tsx", "../src/api.ts"],
  "sourcesContent": ["import { showHUD, LaunchProps } from \"@raycast/api\";\nimport { addTask } from \"./api\";\n\ninterface TaskArguments {\n  taskInput: string;\n}\n\nexport default async function Command(props: LaunchProps<{ arguments: TaskArguments }>) {\n  const { taskInput } = props.arguments;\n  try {\n    await addTask(taskInput);\n    await showHUD(\"Task added successfully\");\n  } catch (error) {\n    if (error instanceof Error) {\n      await showHUD(`Error adding task: ${error.message}`);\n    } else {\n      console.error(error);\n      await showHUD(\"An unknown error occurred\");\n    }\n  }\n}\n", "import { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { Task, Status, Priority } from \"./types/types\";\nimport { getPreferenceValues } from \"@raycast/api\";\n\nconst execPromise = promisify(exec);\nconst taskPath = getPreferenceValues().taskPath;\n\nconst overrideError = \"Configuration override rc.json.array:on\\n\";\nconst command = `${taskPath} export rc.json.array:on`;\n\n//\n// returns a list of all tasks sorted by urgency\nexport const getTasks = async () => {\n  let tasks: Task[] = [];\n  try {\n    const { stdout, stderr } = await execPromise(command);\n    if (stderr && stderr !== overrideError) {\n      throw new Error(\"please make sure you have set the path to task in the extension settings\");\n    }\n\n    const data = JSON.parse(stdout) as Task[];\n    if (data) tasks = data.sort((a, b) => b.urgency - a.urgency);\n  } catch (error) {\n    throw new Error(\"Please make sure you have set the path to task in the settings\");\n  }\n  return tasks;\n};\n\n//\n// returns a single task by its uuid\nexport const getTask = async (uuid: string) => {\n  const tasks = await getTasks();\n  return tasks.find((task) => task.uuid === uuid);\n};\n\n// returns all pending tasks\nexport const getActiveTasks = async () => {\n  const tasks = await getTasks();\n  return tasks.filter((task) => task.status === Status.Pending);\n};\n\n// returns pending tasks for a project\nexport const getTasksForProject = async (project: string) => {\n  const tasks = await getTasks();\n  // Testing => must give me the active task in the next tag\n  return tasks.filter((task) => task.project === project && task.status === Status.Pending);\n};\n\n// returns all pending tasks for a tag (defaults to next)\nexport const getTasksForTag = async (tag = \"next\") => {\n  const tasks = await getTasks();\n  return tasks.filter((task) => task.tags && Array.from(task.tags).includes(tag) && task.status === Status.Pending);\n};\n\nexport const addTask = async (commandString: string) => {\n  const command = `${taskPath} add ${commandString}`;\n\n  // execute command\n  try {\n    const { stderr } = await execPromise(command);\n    if (stderr) console.error(stderr);\n  } catch (error) {\n    throw new Error(`error in addTask function: \"${error}\"`);\n  }\n};\n\n// delete task by its uuid\nexport const deleteTask = async (uuid: string) => {\n  try {\n    const { stderr } = await execPromise(`${taskPath} delete ${uuid} rc.confirmation:off`);\n    if (stderr) console.error(stderr);\n  } catch (error) {\n    throw new Error(`error in deleteTask function: \"${error}\"`);\n  }\n};\n\n// mark a task as done by its uuid\nexport const markTaskAsDone = async (uuid: string) => {\n  try {\n    const { stderr } = await execPromise(`${taskPath} ${uuid} done`);\n    if (stderr) console.error(stderr);\n  } catch (error) {\n    throw new Error(`error in markTaskAsDone function: \"${error}\"`);\n  }\n};\n\nexport const updateTask = async (\n  uuid: string | null,\n  description?: string,\n  project?: string,\n  tags?: string[],\n  due?: string,\n  priority?: Priority | \"\"\n) => {\n  const commandParts = [`${taskPath}`];\n\n  if (uuid) {\n    commandParts.push(\"modify\", uuid);\n  } else {\n    commandParts.push(\"add\");\n  }\n\n  if (typeof description !== \"undefined\") {\n    commandParts.push(`\"${description}\"`);\n  }\n\n  if (typeof project !== \"undefined\") {\n    if (project !== \"\") {\n      commandParts.push(`project:\"${project}\"`);\n    } else {\n      commandParts.push(`project:`);\n    }\n  }\n\n  if (typeof tags !== \"undefined\") {\n    commandParts.push(...tags);\n  }\n\n  if (typeof due !== \"undefined\") {\n    commandParts.push(`due:${due}`);\n  }\n\n  if (typeof priority !== \"undefined\") {\n    if (priority) {\n      commandParts.push(`priority:${priority}`);\n    } else {\n      commandParts.push(`priority:`);\n    }\n  }\n\n  const command = commandParts.join(\" \");\n\n  // execute command\n  try {\n    const { stderr } = await execPromise(command);\n    if (stderr.includes(\"not a valid date\")) {\n      throw new Error(`Invalid due date format. Use the Y-M-D format or Taskwarrior format`);\n    }\n  } catch (error) {\n    throw new Error(`Error in modifyTask function. ${error}`);\n  }\n};\n\n// deletes all tasks in projects and thus deletes the project\nexport const deleteProject = async (project: string) => {\n  const tasks = await getTasksForProject(project);\n  if (tasks.length == 0) {\n    console.log(`project ${project} doesn't exist`);\n    return;\n  }\n\n  for (const task of tasks) {\n    await deleteTask(task.uuid);\n  }\n};\n\n// returns all projects with active tasks\nexport const getAllProjects = async () => {\n  const tasks = await getActiveTasks();\n  const projects = new Set<string>();\n  tasks.forEach((task) => {\n    if (task.project) projects.add(task.project);\n  });\n  projects.add(\"All\");\n  return projects;\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAqC,wBCArC,IAAAC,EAAqB,yBACrBC,EAA0B,gBAE1B,IAAAC,EAAoC,wBAE9BC,KAAc,aAAU,MAAI,EAC5BC,KAAW,uBAAoB,EAAE,SAGvC,IAAMC,EAAU,GAAGC,4BA8CZ,IAAMC,EAAU,MAAOC,GAA0B,CACtD,IAAMC,EAAU,GAAGC,SAAgBF,IAGnC,GAAI,CACF,GAAM,CAAE,OAAAG,CAAO,EAAI,MAAMC,EAAYH,CAAO,EACxCE,GAAQ,QAAQ,MAAMA,CAAM,CAClC,OAASE,EAAP,CACA,MAAM,IAAI,MAAM,+BAA+BA,IAAQ,CACzD,CACF,ED1DA,eAAOC,EAA+BC,EAAkD,CACtF,GAAM,CAAE,UAAAC,CAAU,EAAID,EAAM,UAC5B,GAAI,CACF,MAAME,EAAQD,CAAS,EACvB,QAAM,WAAQ,yBAAyB,CACzC,OAASE,EAAP,CACIA,aAAiB,MACnB,QAAM,WAAQ,sBAAsBA,EAAM,SAAS,GAEnD,QAAQ,MAAMA,CAAK,EACnB,QAAM,WAAQ,2BAA2B,EAE7C,CACF",
  "names": ["addTaskSimple_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_util", "import_api", "execPromise", "taskPath", "command", "taskPath", "addTask", "commandString", "command", "taskPath", "stderr", "execPromise", "error", "Command", "props", "taskInput", "addTask", "error"]
}
