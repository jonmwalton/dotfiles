{
  "version": 3,
  "sources": ["../src/addTaskAdvanced.tsx", "../src/components/Modify.tsx", "../src/api.ts", "../src/utils/dateFormatters.ts"],
  "sourcesContent": ["import Modify from \"./components/Modify\";\nimport { Task } from \"./types/types\";\n\n// Returns the main React component for a view command\nexport default function Command() {\n  // Create an empty task object to be used by the Modify component\n  const emptyTask: Task = {\n    uuid: \"\",\n    description: \"\",\n    entry: \"\",\n    status: \"\",\n    urgency: 0,\n    priority: undefined,\n    project: \"\",\n    tags: new Set(),\n    due: \"\",\n  };\n\n  return <Modify task={emptyTask} />;\n}\n", "import { useState } from \"react\";\nimport { Action, ActionPanel, Form, popToRoot, showToast, Toast } from \"@raycast/api\";\nimport { Priority, Task } from \"../types/types\";\nimport { updateTask } from \"../api\";\nimport { formatDueDate } from \"../utils/dateFormatters\";\n\ninterface FormValues {\n  description?: string;\n  project?: string;\n  tags?: string;\n  due?: string;\n}\n\nconst Modify = (props: { task: Task }) => {\n  const { task } = props;\n\n  const formatPriority = (priority?: Priority) => {\n    switch (priority) {\n      case Priority.H:\n        return \"High\";\n      case Priority.M:\n        return \"Medium\";\n      case Priority.L:\n        return \"Low\";\n      default:\n        return \"None\";\n    }\n  };\n\n  const parsePriority = (priority: string): Priority | \"\" | undefined => {\n    switch (priority) {\n      case \"High\":\n        return Priority.H;\n      case \"Medium\":\n        return Priority.M;\n      case \"Low\":\n        return Priority.L;\n      case \"None\":\n        return \"\";\n      default:\n        return undefined;\n    }\n  };\n\n  const [descriptionError, setdescriptionError] = useState<string | undefined>();\n  const [tagsError, setTagsError] = useState<string | undefined>();\n  const [dueDateError, setDueDateError] = useState<string | undefined>();\n  const initialDueDate = task.due ? formatDueDate(task.due) : undefined;\n\n  const [selectedPriority, setSelectedPriority] = useState<string>(formatPriority(task.priority));\n\n  const dropDescriptionErrorIfNeeded = () => {\n    if (descriptionError && descriptionError.length > 0) {\n      setdescriptionError(undefined);\n    }\n  };\n\n  const dropTagsErrorIfNeeded = () => {\n    if (tagsError && tagsError.length > 0) {\n      setTagsError(undefined);\n    }\n  };\n\n  const dropDueDateErrorIfNeeded = () => {\n    if (dueDateError && dueDateError.length > 0) {\n      setDueDateError(undefined);\n    }\n  };\n\n  const formatTags = (tags: Set<string>) => {\n    return Array.from(tags)\n      .map((tag) => {\n        if (tag.startsWith(\"+\") || tag.startsWith(\"-\")) {\n          return tag;\n        }\n        return `+${tag}`;\n      })\n      .join(\",\");\n  };\n\n  const isFormValid = (description?: string, tags?: string) => {\n    let isValid = true;\n\n    if (!description || description.trim().length === 0) {\n      setdescriptionError(\"A task must at least have a description.\");\n      isValid = false;\n    }\n\n    if (tags && tags.includes(\" \")) {\n      setTagsError(\"spaces are not allowed. format: tag1,tag2,tag3\");\n      isValid = false;\n    }\n\n    if (tags) {\n      const tagsArray = tags.split(\",\");\n      const invalidTags = tagsArray.filter((tag) => !tag.startsWith(\"+\") && !tag.startsWith(\"-\"));\n      if (invalidTags.length > 0) {\n        setTagsError(\"Tags should start with + or -. Format: +tag1,-tag2,+tag3\");\n        isValid = false;\n      }\n    }\n\n    return isValid;\n  };\n\n  const onSubmit = async ({ description, project, tags, due }: FormValues) => {\n    if (!isFormValid(description, tags)) {\n      return;\n    }\n\n    const tagsArray = tags?.split(\",\");\n    const updatedDueDate = due === initialDueDate ? undefined : due;\n    const parsedPriority = parsePriority(selectedPriority);\n    try {\n      await updateTask(task.uuid, description, project, tagsArray, updatedDueDate, parsedPriority);\n      showToast({\n        title: \"Modified Task successfully\",\n        style: Toast.Style.Success,\n      });\n      popToRoot();\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not a valid date\")) {\n        setDueDateError(\"Invalid due date format. Use the 'Y-M-D' format or Taskwarrior shorthand.\");\n      } else {\n        console.error(error);\n        showToast({\n          title: `Error modifying task: ${error}`,\n          style: Toast.Style.Failure,\n        });\n      }\n    }\n  };\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm onSubmit={onSubmit} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        id=\"description\"\n        key=\"description\"\n        title=\"Description\"\n        placeholder=\"task description\"\n        defaultValue={task.description}\n        error={descriptionError}\n        onChange={dropDescriptionErrorIfNeeded}\n        onBlur={(event) => {\n          if (event.target.value?.length == 0) {\n            setdescriptionError(\"A task must at least have a description.\");\n          } else {\n            dropDescriptionErrorIfNeeded();\n          }\n        }}\n      />\n      <Form.TextField\n        id=\"project\"\n        key=\"project\"\n        title=\"Project\"\n        placeholder=\"project name\"\n        defaultValue={task.project ? task.project : \"\"}\n        info=\"leave empty to delete or not add a new project\"\n      />\n      <Form.TextField\n        id=\"tags\"\n        title=\"Tags\"\n        placeholder=\"-tag1,+tag2,+tag3\"\n        defaultValue={task.tags ? formatTags(task.tags) : \"\"}\n        info=\"add comma saparated list of tags. +tag to add and -tag to remove\"\n        error={tagsError}\n        onChange={dropTagsErrorIfNeeded}\n        onBlur={(event) => {\n          if (event.target.value?.includes(\" \")) {\n            setTagsError(\"spaces are not allowed. format: tag1,tag2,tag3\");\n          } else {\n            dropTagsErrorIfNeeded();\n          }\n        }}\n      />\n      <Form.TextField\n        id=\"due\"\n        title=\"Due Date\"\n        placeholder=\"Y-M-D or Taskwarrior shorthand\"\n        defaultValue={initialDueDate}\n        info=\"Enter due date in Y-M-D format or Taskwarrior shorthand (e.g., 'today', 'tomorrow', '+3d', '+1w')\"\n        error={dueDateError}\n        onChange={dropDueDateErrorIfNeeded}\n      />\n      <Form.Dropdown id=\"priority\" title=\"Priority\" value={selectedPriority} onChange={setSelectedPriority}>\n        <Form.Dropdown.Item value=\"High\" title=\"High\" />\n        <Form.Dropdown.Item value=\"Medium\" title=\"Medium\" />\n        <Form.Dropdown.Item value=\"Low\" title=\"Low\" />\n        <Form.Dropdown.Item value=\"None\" title=\"None\" />\n      </Form.Dropdown>\n    </Form>\n  );\n};\n\nexport default Modify;\n", "import { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { Task, Status, Priority } from \"./types/types\";\nimport { getPreferenceValues } from \"@raycast/api\";\n\nconst execPromise = promisify(exec);\nconst taskPath = getPreferenceValues().taskPath;\n\nconst overrideError = \"Configuration override rc.json.array:on\\n\";\nconst command = `${taskPath} export rc.json.array:on`;\n\n//\n// returns a list of all tasks sorted by urgency\nexport const getTasks = async () => {\n  let tasks: Task[] = [];\n  try {\n    const { stdout, stderr } = await execPromise(command);\n    if (stderr && stderr !== overrideError) {\n      throw new Error(\"please make sure you have set the path to task in the extension settings\");\n    }\n\n    const data = JSON.parse(stdout) as Task[];\n    if (data) tasks = data.sort((a, b) => b.urgency - a.urgency);\n  } catch (error) {\n    throw new Error(\"Please make sure you have set the path to task in the settings\");\n  }\n  return tasks;\n};\n\n//\n// returns a single task by its uuid\nexport const getTask = async (uuid: string) => {\n  const tasks = await getTasks();\n  return tasks.find((task) => task.uuid === uuid);\n};\n\n// returns all pending tasks\nexport const getActiveTasks = async () => {\n  const tasks = await getTasks();\n  return tasks.filter((task) => task.status === Status.Pending);\n};\n\n// returns pending tasks for a project\nexport const getTasksForProject = async (project: string) => {\n  const tasks = await getTasks();\n  // Testing => must give me the active task in the next tag\n  return tasks.filter((task) => task.project === project && task.status === Status.Pending);\n};\n\n// returns all pending tasks for a tag (defaults to next)\nexport const getTasksForTag = async (tag = \"next\") => {\n  const tasks = await getTasks();\n  return tasks.filter((task) => task.tags && Array.from(task.tags).includes(tag) && task.status === Status.Pending);\n};\n\nexport const addTask = async (commandString: string) => {\n  const command = `${taskPath} add ${commandString}`;\n\n  // execute command\n  try {\n    const { stderr } = await execPromise(command);\n    if (stderr) console.error(stderr);\n  } catch (error) {\n    throw new Error(`error in addTask function: \"${error}\"`);\n  }\n};\n\n// delete task by its uuid\nexport const deleteTask = async (uuid: string) => {\n  try {\n    const { stderr } = await execPromise(`${taskPath} delete ${uuid} rc.confirmation:off`);\n    if (stderr) console.error(stderr);\n  } catch (error) {\n    throw new Error(`error in deleteTask function: \"${error}\"`);\n  }\n};\n\n// mark a task as done by its uuid\nexport const markTaskAsDone = async (uuid: string) => {\n  try {\n    const { stderr } = await execPromise(`${taskPath} ${uuid} done`);\n    if (stderr) console.error(stderr);\n  } catch (error) {\n    throw new Error(`error in markTaskAsDone function: \"${error}\"`);\n  }\n};\n\nexport const updateTask = async (\n  uuid: string | null,\n  description?: string,\n  project?: string,\n  tags?: string[],\n  due?: string,\n  priority?: Priority | \"\"\n) => {\n  const commandParts = [`${taskPath}`];\n\n  if (uuid) {\n    commandParts.push(\"modify\", uuid);\n  } else {\n    commandParts.push(\"add\");\n  }\n\n  if (typeof description !== \"undefined\") {\n    commandParts.push(`\"${description}\"`);\n  }\n\n  if (typeof project !== \"undefined\") {\n    if (project !== \"\") {\n      commandParts.push(`project:\"${project}\"`);\n    } else {\n      commandParts.push(`project:`);\n    }\n  }\n\n  if (typeof tags !== \"undefined\") {\n    commandParts.push(...tags);\n  }\n\n  if (typeof due !== \"undefined\") {\n    commandParts.push(`due:${due}`);\n  }\n\n  if (typeof priority !== \"undefined\") {\n    if (priority) {\n      commandParts.push(`priority:${priority}`);\n    } else {\n      commandParts.push(`priority:`);\n    }\n  }\n\n  const command = commandParts.join(\" \");\n\n  // execute command\n  try {\n    const { stderr } = await execPromise(command);\n    if (stderr.includes(\"not a valid date\")) {\n      throw new Error(`Invalid due date format. Use the Y-M-D format or Taskwarrior format`);\n    }\n  } catch (error) {\n    throw new Error(`Error in modifyTask function. ${error}`);\n  }\n};\n\n// deletes all tasks in projects and thus deletes the project\nexport const deleteProject = async (project: string) => {\n  const tasks = await getTasksForProject(project);\n  if (tasks.length == 0) {\n    console.log(`project ${project} doesn't exist`);\n    return;\n  }\n\n  for (const task of tasks) {\n    await deleteTask(task.uuid);\n  }\n};\n\n// returns all projects with active tasks\nexport const getAllProjects = async () => {\n  const tasks = await getActiveTasks();\n  const projects = new Set<string>();\n  tasks.forEach((task) => {\n    if (task.project) projects.add(task.project);\n  });\n  projects.add(\"All\");\n  return projects;\n};\n", "function parseDate(timestamp: string): Date {\n  const year = timestamp.substring(0, 4);\n  const month = timestamp.substring(4, 6);\n  const day = timestamp.substring(6, 8);\n  const hours = timestamp.substring(9, 11);\n  const minutes = timestamp.substring(11, 13);\n  const seconds = timestamp.substring(13, 15);\n  const iso8601Timestamp = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}Z`;\n\n  return new Date(iso8601Timestamp);\n}\n\nexport const formatDate = (date: string) => {\n  const dateObject = parseDate(date);\n\n  const isToday = (date: Date): boolean => {\n    const today = new Date();\n    return (\n      date.getDate() === today.getDate() &&\n      date.getMonth() === today.getMonth() &&\n      date.getFullYear() === today.getFullYear()\n    );\n  };\n\n  const isYesterday = (date: Date): boolean => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    return (\n      date.getDate() === yesterday.getDate() &&\n      date.getMonth() === yesterday.getMonth() &&\n      date.getFullYear() === yesterday.getFullYear()\n    );\n  };\n\n  const formatTime = (date: Date): string => {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const period = hours >= 12 ? \"PM\" : \"AM\";\n    return `${((hours + 11) % 12) + 1}:${minutes.toString().padStart(2, \"0\")} ${period}`;\n  };\n\n  if (isToday(dateObject)) {\n    return `Today at ${formatTime(dateObject)}`;\n  } else if (isYesterday(dateObject)) {\n    return `Yesterday at ${formatTime(dateObject)}`;\n  } else {\n    return dateObject.toLocaleDateString() + \" at \" + formatTime(dateObject);\n  }\n};\n\nexport const getActiveTime = (timestamp: string): string => {\n  const dateObject = parseDate(timestamp);\n  const now = new Date();\n  const msPerMinute = 60 * 1000;\n  const msPerHour = msPerMinute * 60;\n  const msPerDay = msPerHour * 24;\n  const msPerMonth = msPerDay * 30;\n  const msPerYear = msPerDay * 365;\n\n  const elapsed = now.getTime() - dateObject.getTime();\n\n  if (elapsed < msPerMinute) {\n    const seconds = Math.round(elapsed / 1000);\n    return `${seconds} second${seconds !== 1 ? \"s\" : \"\"}`;\n  } else if (elapsed < msPerHour) {\n    const minutes = Math.round(elapsed / msPerMinute);\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"}`;\n  } else if (elapsed < msPerDay) {\n    const hours = Math.round(elapsed / msPerHour);\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"}`;\n  } else if (elapsed < msPerMonth) {\n    const days = Math.round(elapsed / msPerDay);\n    return `${days} day${days !== 1 ? \"s\" : \"\"}`;\n  } else if (elapsed < msPerYear) {\n    const months = Math.round(elapsed / msPerMonth);\n    return `${months} month${months !== 1 ? \"s\" : \"\"}`;\n  } else {\n    const years = Math.round(elapsed / msPerYear);\n    return `${years} year${years !== 1 ? \"s\" : \"\"}`;\n  }\n};\n\nexport const formatDueDate = (dueDate: string): string => {\n  const dueDateObject = parseDate(dueDate);\n\n  const isToday = (date: Date): boolean => {\n    const today = new Date();\n    return (\n      date.getDate() === today.getDate() &&\n      date.getMonth() === today.getMonth() &&\n      date.getFullYear() === today.getFullYear()\n    );\n  };\n\n  const isTomorrow = (date: Date): boolean => {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return (\n      date.getDate() === tomorrow.getDate() &&\n      date.getMonth() === tomorrow.getMonth() &&\n      date.getFullYear() === tomorrow.getFullYear()\n    );\n  };\n\n  const formatTime = (date: Date): string => {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const period = hours >= 12 ? \"PM\" : \"AM\";\n    return `${((hours + 11) % 12) + 1}:${minutes.toString().padStart(2, \"0\")} ${period}`;\n  };\n\n  if (isToday(dueDateObject)) {\n    return `Today at ${formatTime(dueDateObject)}`;\n  } else if (isTomorrow(dueDateObject)) {\n    return `Tomorrow at ${formatTime(dueDateObject)}`;\n  } else {\n    return `${dueDateObject.toLocaleDateString()} at ${formatTime(dueDateObject)}`;\n  }\n};\n"],
  "mappings": "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",
  "names": ["addTaskAdvanced_exports", "__export", "Command", "__toCommonJS", "import_react", "import_api", "import_child_process", "import_util", "import_api", "execPromise", "taskPath", "command", "taskPath", "updateTask", "uuid", "description", "project", "tags", "due", "priority", "commandParts", "taskPath", "command", "stderr", "execPromise", "error", "parseDate", "timestamp", "year", "month", "day", "hours", "minutes", "seconds", "iso8601Timestamp", "formatDueDate", "dueDate", "dueDateObject", "parseDate", "isToday", "date", "today", "isTomorrow", "tomorrow", "formatTime", "hours", "minutes", "period", "import_jsx_runtime", "Modify", "props", "task", "formatPriority", "priority", "parsePriority", "descriptionError", "setdescriptionError", "tagsError", "setTagsError", "dueDateError", "setDueDateError", "initialDueDate", "formatDueDate", "selectedPriority", "setSelectedPriority", "dropDescriptionErrorIfNeeded", "dropTagsErrorIfNeeded", "dropDueDateErrorIfNeeded", "formatTags", "tags", "tag", "isFormValid", "description", "isValid", "onSubmit", "project", "due", "tagsArray", "updatedDueDate", "parsedPriority", "updateTask", "error", "event", "Modify_default", "import_jsx_runtime", "Command", "Modify_default"]
}
